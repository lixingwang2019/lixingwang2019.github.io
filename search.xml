<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PAT-我要通过]]></title>
    <url>%2F2019%2F06%2F12%2FPAT-%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87%2F</url>
    <content type="text"><![CDATA[“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。 得到“答案正确”的条件是： 字符串中必须仅有 P、 A、 T这三种字符，不可以包含其它字符； 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串； 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a、 b、 c 均或者是空字符串，或者是仅由字母 A 组成的字符串。 现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。 输入格式： 每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 nnn (&lt;10&lt;10&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。 输出格式： 每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出 YES，否则输出 NO。 输入样例： 8PATPAATAAPATAAAAPAATAAAAxPATxPTWhateverAPAAATAA 输出样例： YESYESYESYESNONONONO &lt;font face=”微软雅黑”size= 3&gt;# 刚开始对这个题目的个别条件不理解，经过谷歌后，表达一下个人对此题的得到 “答案正确” 的条件理解&gt; 1. 必须字符串必须要有 P 、A 、T；&gt; 2. xPATx 中 x 表示空字符串（不输入字符），或者是 A，只能是其中一种；&gt; 3. P 和 T 都值能出现一次；&gt; 4. T 之后的 A 的数量 = P 和 T之间 A 的数量 * P之前 A 的数量。 #include &lt;cstdio&gt; int main() { int n;//字符串的个数 int i; char c;//定义每次输入的字符 scanf(&quot;%d&quot;, &amp;n); while (getchar() != &apos;\n&apos;);//清空缓存区 for (i = 0; i &lt; n; i++) { int count[3] = {0};//用来标记不同位置的A个数 int tag = 0; //标记变量 while ((c = getchar()) != &apos;\n&apos;) { if (&apos;A&apos; == c)//统计字符A的个数 { count[tag]++;//P前的A标记tag=0 } else if (&apos;P&apos; == c &amp;&amp; 0 == tag)//如果输入的是P { tag = 1;//在P和T之间出现A标记tag=1 } else if (&apos;T&apos; == c &amp;&amp; 1 == tag)//如果 输入的是T { tag = 2;//输入T后 } else { break; //如果第一个字符不是A或者P则终止对该字符串继续判断 } } if (c == &apos;\n&apos; &amp;&amp; 2 == tag &amp;&amp; count[1] &amp;&amp; count[2] == count[0] * count[1])//字符串要包括P，T及A { printf(&quot;YES\n&quot;); } else { printf(&quot;NO\n&quot;); } if(c != &apos;\n&apos;)//能来继续判断下一个字符串 while(getchar() != &apos;\n&apos;); } return 0; } 总结 这是考察对字符串的处理，代码中主要有 count[3] 、 tag 以及对 P T 判断 count[tag] 和 tag = 0 的配套使用，分别统计 P 之前的 A 的个数，T 之后的 A 的个数，P 和 T之间的 A 的个数]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c语言遇到的问题]]></title>
    <url>%2F2019%2F04%2F15%2Fc%E8%AF%AD%E8%A8%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[关于 getchar() 的使用 getchar() 是处理屏幕上输入的字符或整数（每次只读取一个），如果输出用 %c 则输出其原始数据，若用 %d 输出对应的ASCII码。 char a[50]; t = 0; a[t] = getchar(); printf （&quot;%c&quot;,a[t]）; //上面是将单个字符赋值给 a[] 接下来举个整数的例子 int a[50]; t = 0; a[t] = getchar(); printf (&quot;%d&quot;, a[t]); 输入：7 输出：55 解决 getchar（）读入的单个字符后用 scanf(&quot;%d&quot;,a[t]) 输出ASCII码的问题 如果你用 getchar() 后想输出原始数据就需要减去 &#39;0&#39;,一般是针对于其ASCII码大于 48 的进行处理，也就是说一般是对于十进制数进行处理，举个例子吧 3’ - ‘0’ 对应的ASCLL码就是 51-48 ,结果是3 k = a[1] - &apos;0&apos;; printf (&quot;%d&quot;,k); gets(): gets()函数是从标准输入中读取一行到缓冲区中，直到 EOF或者 换行，但是并不检查溢出情况。 关于scanf的问题 c语言中对于输入整数而言，输入的整数之间是没有间隔的就直接存储在了对应的内存区，若输入的是 1 2 3 则 scanf 就会依次读取 1 2 3 ,最后输出的会是 3, 但是如此方式也会有它自己的用处。 当然也可以用 fflush(stdin) 清除缓存， int i,a,n; scanf(&quot;%d&quot;,&amp;n); for(i = 0; i &lt; n; i++) { scanf(&quot;%d&quot;,&amp;a); fflush(stdin); // printf(&quot;a== %d\n&quot;, a); } printf(&quot;%d&quot;,a); 其输入和输出为 读取字符 gets()同上 scanf()读取非空格字符(%s)或从指定集合（%[]）中匹配非空字符 使用while循环从标准输入或某个文件中依次读入一个字符到缓冲区中，直到行尾或文件结尾，或者遇到其他相关终止符 getc() fgetc() getchar() 以上都可以配上循环使用，但是需要检查溢出 文件系统freopen 函数 官方解释：freopen 函数主要用于将标准输入 / 输出流（stdin :标准输入流，stdout：标准输出流， stderr：标准错误输出流）重定向到文件中。 个人浅面认识运用 freopen 及标准输入 / 输出流，就将 c 程序运行后在黑窗口用键盘输入屏幕输出的操作改为在文件中输入输出 int a = 0; int b = 0; freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin); freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout); while(scanf(&quot;%d %d&quot;, &amp;a, &amp;b) != EOF) { printf(&quot;%d\n&quot;, a+b); } fclose(stdin); fclose(stdout); 以上代码就是在 in.txt 文件中输入，在out.txt输出]]></content>
      <categories>
        <category>c的问题</category>
      </categories>
      <tags>
        <tag>c语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建自己的博客（二）.md]]></title>
    <url>%2F2019%2F04%2F09%2F%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[配置博客的主题 刚创建的博客是使用的默认主题，在 Hexo 官网寻找了自己喜欢的主题： next。 首先是对主题进行克隆，见图吧 接下来就是去站点配置文件下，修改主题名 接下来在本地服务器上看一下更改主题后的博客 由于 next 主题中窗口显示有不同的排版，我比较喜欢的是 Gemini 的， 那么怎么修改呢？ 先打开主题配置文件（多注意所在的目录），进入后找到 Schemes ，见图 修改后的博客就是这样的 在配置的过程中出现的问题 每次将博客上传到 GitHub 上后第三方域名就是失效了 ： 解决方案（直接见图） 之后再部署到 GitHub 上后，第三方域名就不会失效，也有别的方案，那就需要参考大神的了 2 .启动本地服务器无效（直接见图） 为博客设置标签和分类栏目 设置这两个栏目后，会生成相对应的文档 为博客设置 GitHub 首先要在主题配置文件中找到 social ，再进行修改 注意图中的两横杆后的 github 是表示图片，显示如下 配置底部的建站日期和作者 是在主题配置文件中进行修改 经过如上配置后博客底部显示如下 总结 首先我只是为博客配置了一点点功能，我配置时看了很多大佬的博客，那真是各有千秋 lixingwnag.top 上面是我的博客，大概一共花费了3天的时间，参考了大量大佬的文章，刚开始的时候前几步还很简单，但是配置主题的时候就毫无头绪，但是经过不断的尝试好像慢慢知道了在博客文件下的一些文件的用途，以及文件里面少部分的功能用途 俗话说万事开头难，经过这次的折腾深刻体会到了这句话；都已经开头了，后面就会慢慢熟练起来 贵在坚持 若有问题欢迎指出]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F02%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
